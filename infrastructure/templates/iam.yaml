AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM roles and policies for ChainOpt Inventory.'

Parameters:
  Environment:
    Type: String
    Description: 'Deployment environment (dev, staging, prod).'
    AllowedValues: [dev, staging, prod]
    Default: dev

Resources:
  ChainOptAddProductLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ChainOptAddProductLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ChainOptAddProductPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ChainOptInventory-${Environment}'
        - PolicyName: 'ChainOptAddProductLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChainOptAddProduct-${Environment}:*'

  ChainOptGetAllProductsLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ChainOptGetAllProductsLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ChainOptGetAllProductsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Scan'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ChainOptInventory-${Environment}'
        - PolicyName: 'ChainOptGetAllProductsLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChainOptGetAllProducts-${Environment}:*'

  ChainOptGetProductLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ChainOptGetProductLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ChainOptGetProductPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ChainOptInventory-${Environment}'
        - PolicyName: 'ChainOptGetProductLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChainOptGetProduct-${Environment}:*'

  ChainOptGetAllProductsByWarehouseIdLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ChainOptGetAllProductsByWarehouseIdLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ChainOptGetAllProductsByWarehouseIdPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Query'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ChainOptInventory-${Environment}/index/GSI-Warehouse'
        - PolicyName: 'ChainOptGetAllProductsByWarehouseIdLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChainOptGetAllProductsByWarehouseId-${Environment}:*'

  ChainOptDeleteProductLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ChainOptDeleteProductLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ChainOptDeleteProductPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ChainOptInventory-${Environment}'
        - PolicyName: 'ChainOptDeleteProductLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChainOptDeleteProduct-${Environment}:*'

  ChainOptUpdateProductLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ChainOptUpdateProductLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ChainOptUpdateProductPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ChainOptInventory-${Environment}'
        - PolicyName: 'ChainOptUpdateProductLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChainOptUpdateProduct-${Environment}:*'

# Orders
  ChainOptInitializeDBLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ChainOptInitializeDBLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ChainOptInitializeDBLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:PutSecretValue'
                  - 'secretsmanager:UpdateSecret'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ChainOptRDSCredentials-${Environment}-*'
        - PolicyName: "AllowLambdaVpcNetworking"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'
        - PolicyName: 'DescribeRDSPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'rds:DescribeDBInstances'
                  - 'rds:DescribeDBClusters'
                Resource: '*'
        - PolicyName: 'ChainOptInitializeDBLambdaLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChainOptInitializeDB-${Environment}:*'

  ChainOptUpdateSecretLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ChainOptUpdateSecretLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ChainOptUpdateSecretLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:PutSecretValue'
                  - 'secretsmanager:UpdateSecret'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:ChainOptRDSCredentials-${Environment}-*'
        - PolicyName: "AllowLambdaVpcNetworking"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'
        - PolicyName: 'ChainOptUpdateSecretLambdaLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChainOptUpdateSecret-${Environment}:*'

  ChainOptCreateOrderLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ChainOptCreateOrderLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ChainOptCreateOrderPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'rds:DescribeDBInstances'
                  - 'rds:DescribeDBClusters'
                  - 'rds:ExecuteStatement'
                  - 'rds:BatchExecuteStatement'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:UpdateItem'
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - '*'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ChainOptOrders-${Environment}'
        - PolicyName: "AllowLambdaVpcNetworking"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'
        - PolicyName: 'ChainOptCreateOrderLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChainOptCreateOrder-${Environment}:*'

  ChainOptGetOrdersLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'ChainOptGetOrdersLambdaRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'ChainOptGetOrdersPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Query'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/ChainOptOrders-${Environment}'
        - PolicyName: "AllowLambdaVpcNetworking"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'
        - PolicyName: 'ChainOptGetOrdersLogPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ChainOptGetOrders-${Environment}:*'

Outputs:
  ChainOptAddProductLambdaRoleArn:
    Value: !GetAtt ChainOptAddProductLambdaRole.Arn
    Export:
      Name: !Sub 'ChainOptAddProductLambdaRoleArn-${Environment}'
  ChainOptGetAllProductsLambdaRoleArn:
    Value: !GetAtt ChainOptGetAllProductsLambdaRole.Arn
    Export:
      Name: !Sub 'ChainOptGetAllProductsLambdaRoleArn-${Environment}'
  ChainOptGetProductLambdaRoleArn:
    Value: !GetAtt ChainOptGetProductLambdaRole.Arn
    Export:
      Name: !Sub 'ChainOptGetProductLambdaRoleArn-${Environment}'
  ChainOptGetAllProductsByWarehouseIdLambdaRoleArn:
    Value: !GetAtt ChainOptGetAllProductsByWarehouseIdLambdaRole.Arn
    Export:
      Name: !Sub 'ChainOptGetAllProductsByWarehouseIdLambdaRoleArn-${Environment}'
  ChainOptDeleteProductLambdaRoleArn:
    Value: !GetAtt ChainOptDeleteProductLambdaRole.Arn
    Export:
      Name: !Sub 'ChainOptDeleteProductLambdaRoleArn-${Environment}'
  ChainOptUpdateProductLambdaRoleArn:
    Value: !GetAtt ChainOptUpdateProductLambdaRole.Arn
    Export:
      Name: !Sub 'ChainOptUpdateProductLambdaRoleArn-${Environment}'
  ChainOptInitializeDBLambdaRoleArn:
    Value: !GetAtt ChainOptInitializeDBLambdaRole.Arn
    Export:
      Name: !Sub 'ChainOptInitializeDBLambdaRoleArn-${Environment}'
  ChainOptUpdateSecretLambdaRoleArn:
    Value: !GetAtt ChainOptUpdateSecretLambdaRole.Arn
    Export:
      Name: !Sub 'ChainOptUpdateSecretLambdaRoleArn-${Environment}'
  ChainOptCreateOrderLambdaRoleArn:
    Value: !GetAtt ChainOptCreateOrderLambdaRole.Arn
    Export:
      Name: !Sub 'ChainOptCreateOrderLambdaRoleArn-${Environment}'
  ChainOptGetOrdersLambdaRoleArn:
    Value: !GetAtt ChainOptGetOrdersLambdaRole.Arn
    Export:
      Name: !Sub 'ChainOptGetOrdersLambdaRoleArn-${Environment}'

